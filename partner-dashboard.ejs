<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Partner Dashboard - Shree JMTS Wires</title>
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@400;700&display=swap" rel="stylesheet">
    
    <style>
        body { background-color: #f4f7f6; padding-top: 0; font-family: 'Roboto Condensed', sans-serif; }
        .dashboard-header { background-color: #ffffff; color: #1a237e; padding: 20px 0; text-align: center; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); margin-bottom: 40px; }
        .dashboard-header .header-content { max-width: 1200px; margin: 0 auto; display: flex; align-items: center; justify-content: space-between; padding: 0 20px; }
        .dashboard-header h1 { color: #1a237e; margin: 0; font-size: 1.8em; font-weight: 700; }
        .user-info { text-align: right; margin-left: auto; display: flex; flex-direction: column; align-items: flex-end; gap: 5px; }
        .logout-form button { background-color: #d32f2f; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; font-weight: 700; transition: background-color 0.3s; }
        .logout-form button:hover { background-color: #b71c1c; }
        .dashboard-content { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .dashboard-card { background: white; padding: 25px; border-left: 5px solid #ff9800; border-radius: 10px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); text-align: left; position: relative; }
        .dashboard-card h3 { color: #1a237e; margin-top: 0; font-size: 1.5em; border-bottom: 1px solid #eee; padding-bottom: 10px; margin-bottom: 15px; display: flex; justify-content: space-between; align-items: center; }
        .dealer-details-form { padding: 10px 0; }
        .dealer-details-form label { display: block; margin-top: 10px; font-weight: 700; color: #1a237e; }
        .dealer-details-form input, .dealer-details-form textarea { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px; margin-bottom: 10px; box-sizing: border-box; }
        .form-action-buttons { margin-top: 20px; }
        .form-action-buttons button { padding: 10px 20px; border: none; border-radius: 5px; margin-right: 10px; cursor: pointer; font-weight: 700; transition: background-color 0.2s; }
        .form-action-buttons .save-btn { background-color: #4caf50; color: white; }
        .form-action-buttons .cancel-btn { background-color: #f4f4f4; color: #333; }
        .message-box { margin-top: 15px; padding: 10px; border-radius: 5px; text-align: center; font-weight: 700; }
        .message-box.success { background-color: #e8f5e9; color: #388e3c; }
        .message-box.error { background-color: #ffebee; color: #d32f2f; }
        .message-box.loading { background-color: #e3f2fd; color: #2196f3; }
        .data-table { width: 100%; border-collapse: collapse; font-size: 0.9em; text-align: left; }
        .data-table th, .data-table td { padding: 12px 15px; border-bottom: 1px solid #eee; }
        .data-table thead tr { background-color: #e3f2fd; color: #1a237e; text-transform: uppercase; font-weight: 700; }
        .data-table tbody tr:hover { background-color: #f9f9f9; }
        .dealer-action-btn { background: none; border: none; color: #1a237e; cursor: pointer; padding: 4px; font-size: 1.1em; transition: color 0.2s; }
        .dealer-action-btn:hover { color: #ff9800; }
        .section-header { display: flex; justify-content: space-between; align-items: center; }
        .section-header h3 { border-bottom: none; padding-bottom: 0; margin-bottom: 0; }
    </style>
</head>
<body>
    <header class="dashboard-header">
        <div class="header-content">
            <div class="logo-container">
                <h1>Welcome, <%= username %>!</h1>
            </div>
            
            <div class="user-info">
                <p style="margin: 0; font-weight: 700; color: #1a237e;">
                    Role: <%= isAdmin ? 'Admin' : 'Partner' %>
                </p>
                <div class="logout-form">
                    <form action="/auth/logout" method="POST">
                        <button type="submit"><i class="fa-solid fa-arrow-right-from-bracket"></i> Logout</button>
                    </form>
                </div>
            </div>
        </div>
    </header>

    <div class="dashboard-content">
        
        <section class="dashboard-card" id="dealerManagementCard" style="border-left-color: #8e24aa; margin-bottom: 40px;">
            <div class="section-header">
                 <h3 id="dealerCardTitle"><i class="fa-solid fa-users-gear"></i> Manage Dealer Network</h3>
                 <button 
                    class="edit-toggle-btn" 
                    id="addDealerButton" 
                    onclick="openDealerForm(null)" 
                    style="border-color: #4caf50; color: #4caf50;"
                >
                    <i class="fa-solid fa-plus"></i> Add New Dealer
                </button>
            </div>
            <hr style="margin-top: 10px; border: 0; border-top: 1px solid #eee;">

            <div id="dealerListDisplay" style="margin-top: 15px;">
                <p id="loadingMessage" class="message-box loading" style="display: block;">Loading dealers...</p>
            </div>
        </section>

        <section class="dashboard-card" id="dealerFormCard" style="border-left-color: #ff9800; display: none;">
            <h3 id="formTitle"><i class="fa-solid fa-user-plus"></i> Add New Dealer</h3>

            <form id="detailsForm" class="dealer-details-form">
                <label for="companyName">Company Name <span style="color:red;">*</span></label>
                <input type="text" id="companyName" name="companyName" required>

                <label for="contactPerson">Contact Person</label>
                <input type="text" id="contactPerson" name="contactPerson">

                <label for="phoneNumber">Phone Number <span style="color:red;">*</span></label>
                <input type="tel" id="phoneNumber" name="phoneNumber" required>

                <label for="gstinNumber">GSTIN / Tax ID</label>
                <input type="text" id="gstinNumber" name="gstinNumber" maxlength="15">

                <label for="address">Address</label>
                <textarea id="address" name="address" rows="3"></textarea>
                
                <div class="message-box" id="formMessage" style="display: none;"></div>

                <div class="form-action-buttons">
                    <button type="submit" class="save-btn"><i class="fa-solid fa-save"></i> Save Details</button>
                    <button type="button" class="cancel-btn" onclick="closeDealerForm()"><i class="fa-solid fa-xmark"></i> Cancel</button>
                </div>
            </form>
        </section>
        
    </div>
    
    <script>
        // EJS INJECTION: Set a global variable based on server-side status
        const IS_ADMIN = <%= isAdmin %>; 
        const CURRENT_USERNAME = '<%= username %>';

        // State and DOM elements
        let dealerList = []; 
        let editingDealerId = null; 

        const dealerListDisplay = document.getElementById('dealerListDisplay');
        const dealerFormCard = document.getElementById('dealerFormCard');
        const detailsForm = document.getElementById('detailsForm');
        const formTitle = document.getElementById('formTitle');
        const formMessage = document.getElementById('formMessage');
        const loadingMessage = document.getElementById('loadingMessage');
        const dealerManagementCard = document.getElementById('dealerManagementCard'); 
        const dealerCardTitle = document.getElementById('dealerCardTitle');
        
        // --- UI UTILITIES ---
        
        function showMessage(type, message) {
            formMessage.textContent = message;
            formMessage.className = 'message-box ' + type;
            formMessage.style.display = 'block';
            setTimeout(() => {
                formMessage.style.display = 'none';
            }, 5000);
        }

        // --- RENDERING LIST VIEW (Updated for Admin) ---
        function renderDealerList() {
            if (dealerList.length === 0) {
                const message = IS_ADMIN 
                    ? '<p style="text-align: center; color: #8e24aa; font-style: italic;">The Master Dealer Network is empty.</p>'
                    : '<p style="text-align: center; color: #8e24aa; font-style: italic;">No dealers added yet. Click "Add New Dealer" to begin.</p>';
                dealerListDisplay.innerHTML = message;
                return;
            }
            
            // Update the card title with count
            dealerCardTitle.innerHTML = IS_ADMIN
                ? `<i class="fa-solid fa-users-gear"></i> **MASTER** Dealer Network (${dealerList.length} Total)`
                : `<i class="fa-solid fa-users-gear"></i> Manage Dealer Network (${dealerList.length} Dealers)`;


            let tableHTML = `
                <div style="overflow-x: auto;">
                    <table class="data-table">
                        <thead>
                            <tr>
                                ${IS_ADMIN ? '<th>Partner</th>' : ''} <th>Company Name</th>
                                <th>Contact Person</th>
                                <th>Phone</th>
                                <th>GSTIN</th>
                                <th style="text-align: center;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            dealerList.forEach(dealer => {
                const companyName = dealer.company_name || 'N/A';
                const contactPerson = dealer.contact_person || 'N/A';
                const phoneNumber = dealer.phone_number || 'N/A';
                const gstinNumber = dealer.gstin_number || 'N/A';
                
                // Determine if the current user owns the dealer (to enable editing)
                // Admin can only edit their own records via this simple UI.
                const isOwner = !IS_ADMIN || dealer.partner_username === CURRENT_USERNAME;
                const dealerIdToUse = dealer.id || dealer.dealer_id;

                tableHTML += `
                    <tr>
                        ${IS_ADMIN ? `<td><i class="fa-solid fa-user-tag"></i> ${dealer.partner_username || 'N/A'}</td>` : ''}
                        <td>${companyName}</td>
                        <td>${contactPerson}</td>
                        <td>${phoneNumber}</td>
                        <td>${gstinNumber}</td>
                        <td style="text-align: center;">
                            ${isOwner 
                                ? `<button class="dealer-action-btn" title="Edit Dealer" onclick="window.openDealerForm('${dealerIdToUse}')">
                                    <i class="fa-solid fa-pen-to-square"></i>
                                   </button>`
                                : `<span style="color: #ccc;" title="Cannot edit other partner's records in this view"><i class="fa-solid fa-lock"></i></span>`
                            }
                        </td>
                    </tr>
                `;
            });

            tableHTML += `
                        </tbody>
                    </table>
                </div>
            `;
            dealerListDisplay.innerHTML = tableHTML;
        }
        
        // --- API CALL: FETCH DEALER LIST (Modified for Admin) ---
        async function loadDealerNetwork() {
            loadingMessage.style.display = 'block';
            dealerListDisplay.innerHTML = ''; 

            // Conditional API endpoint based on Admin status
            const apiEndpoint = IS_ADMIN ? '/api/admin/all-dealers' : '/api/dealers';
            
            // If Admin, hide the "Add New Dealer" button as the current form only adds for the current user
            if (IS_ADMIN) {
                 document.getElementById('addDealerButton').style.display = 'none';
            }

            try {
                const response = await fetch(apiEndpoint);
                const data = await response.json();
                
                if (response.ok && data.success) {
                    dealerList = data.dealers; 
                    renderDealerList();
                } else {
                    dealerListDisplay.innerHTML = '<p style="text-align: center; color: #d32f2f; font-weight: 700;">Failed to load dealer network.</p>';
                }
            } catch (error) {
                console.error("Error fetching dealer network:", error);
                dealerListDisplay.innerHTML = '<p style="text-align: center; color: #d32f2f; font-weight: 700;">Server connection error while loading dealers.</p>';
            } finally {
                loadingMessage.style.display = 'none';
            }
        }


        // --- UI & FORM LOGIC ---

        window.openDealerForm = function(dealerId = null) {
            detailsForm.reset();
            formMessage.style.display = 'none';
            
            editingDealerId = (dealerId === 'null' || dealerId === null) ? null : dealerId; 

            if (editingDealerId) {
                // Find dealer by 'id' (partner view) or 'dealer_id' (admin view)
                const dealer = dealerList.find(d => d.id == editingDealerId || d.dealer_id == editingDealerId);
                if (!dealer) return; 
                
                // Security check: Only allow editing if the user is the owner
                if (IS_ADMIN && dealer.partner_username && dealer.partner_username !== CURRENT_USERNAME) {
                    alert('Error: You can only edit your own dealer records using this form, even as an Admin.');
                    return; 
                }

                formTitle.innerHTML = `<i class="fa-solid fa-user-pen"></i> Edit Dealer: ${dealer.company_name}`;
                
                document.getElementById('companyName').value = dealer.company_name || '';
                document.getElementById('contactPerson').value = dealer.contact_person || '';
                document.getElementById('phoneNumber').value = dealer.phone_number || '';
                document.getElementById('gstinNumber').value = dealer.gstin_number || '';
                document.getElementById('address').value = dealer.address || '';

            } else {
                formTitle.innerHTML = `<i class="fa-solid fa-user-plus"></i> Add New Dealer`;
            }

            dealerManagementCard.style.display = 'none';
            dealerFormCard.style.display = 'block';
        }
        
        window.closeDealerForm = function() {
            editingDealerId = null;
            dealerFormCard.style.display = 'none';
            dealerManagementCard.style.display = 'block';
        }
        
        // --- FORM SUBMISSION HANDLER ---
        detailsForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                dealerId: editingDealerId, 
                companyName: document.getElementById('companyName').value.trim(),
                contactPerson: document.getElementById('contactPerson').value.trim(),
                phoneNumber: document.getElementById('phoneNumber').value.trim(),
                gstinNumber: document.getElementById('gstinNumber').value.trim(),
                address: document.getElementById('address').value.trim(),
            };

            if (!formData.companyName || !formData.phoneNumber) {
                showMessage('error', 'Company Name and Phone Number are required fields.');
                return;
            }

            showMessage('loading', 'Saving dealer details...');
            
            try {
                // Uses the standard POST route for create/update
                const response = await fetch('/api/dealers', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                
                const data = await response.json();

                if (data.success) {
                    showMessage('success', data.message);
                    await loadDealerNetwork(); 
                    closeDealerForm(); 
                } else {
                    showMessage('error', data.message || 'Failed to save dealer.');
                }
                
            } catch (error) {
                console.error("Error saving dealer:", error);
                showMessage('error', `Failed to save dealer: Server connection error.`);
            }
        });

        // Start the application by loading the dealer network list
        window.onload = loadDealerNetwork;
        
    </script>
</body>
</html>